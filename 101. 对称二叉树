
101. 对称二叉树
给你一个二叉树的根节点 root ， 检查它是否轴对称。

示例 1：
输入：root = [1,2,2,3,4,4,3]
输出：true

思路1、使用递归，判断轴对称的条件是
当前节点值一样，并且左右子树一样
遍历左右节点，如果不一致，则返回，肯定不是轴对称
一致则继续遍历直到子节点

class Solution {
    public boolean isSymmetric(TreeNode root) {
        return  isSymeNode(root,root);
    }

    public boolean isSymeNode(TreeNode node1, TreeNode node2) {
        if (node1 == null && node2 == null) {
            return true;
        } 
         if (node1 == null || node2 == null) {
            return false;
        } 
        return (node1.val == node2.val) && isSymeNode(node1.left,node2.right) && isSymeNode(node1.right,node2.left);
    }

}

思路2：使用迭代，定义一个队列，初始化时插入两个根节点，当队列不为null时，取出节点呢，判断两个节点是否相等，不想等，则返回false，都为null ，继续遍历队列，继续往队列插入两个节点的左节点、右节点，右节点、左节点
代码：

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return isSymeNode(root, root);
    }

    public boolean isSymeNode(TreeNode node1, TreeNode node2) {
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(node1);
        q.offer(node2);
        while (!q.isEmpty()) {
            TreeNode u = q.poll();
            TreeNode v = q.poll();
            if (v == null && u == null) {
                continue;
            }
            if ((v == null || u == null) || (v.val != u.val)) {
                return false;
            }
            q.offer(u.left);
            q.offer(v.right);
            q.offer(u.right);
            q.offer(v.left);
        }
        return true
    }

}
